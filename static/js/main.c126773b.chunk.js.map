{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/customer-list/index.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","CustomerList","useState","inputValue","setInputValue","inputList","setInputList","className","type","placeholder","data-testid","value","onChange","preventDefault","target","onClick","prevState","item","index","key","App","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"qNAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,0GCoBFgB,MAzCf,WAAyB,IAAD,EACgBC,mBAAS,IADzB,mBACbC,EADa,KACDC,EADC,OAEcF,mBAAS,IAFvB,mBAEbG,EAFa,KAEFC,EAFE,KAoBpB,OACI,yBAAKC,UAAU,iEACX,6BAASA,UAAU,wDACf,2BAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,OAAOC,cAAY,YAAYC,MAAOR,EAAYS,SAnBrF,SAACpB,GACvBA,EAAEqB,iBAEc,KADCrB,EAAEsB,OAAOH,OAExBP,EAAcZ,EAAEsB,OAAOH,UAgBjB,4BAAQI,QAZR,WACQ,KAAfZ,IACDG,GAAa,SAACU,GAAD,4BAAmBA,GAAnB,CAA8Bb,OAC3CC,EAAc,MASgBI,KAAK,SAASD,UAAU,QAAQG,cAAY,iBAAlE,iBAEJ,wBAAIH,UAAU,eAAeG,cAAY,iBAEvCL,EACMA,EAAUrB,KAAI,SAACiC,EAAMC,GACjB,OAAO,wBAAIX,UAAU,mBAAmBG,cAAA,mBAAyBQ,GAASC,IAAKD,GAASD,MAGnG,Q,MCpBEG,MATf,WACE,OACE,6BACE,gCAAYC,OALJ,kBAMR,kBAAC,EAAD,QCDAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtC,MAAK,SAAA0C,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,WCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,uBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,uBAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHtC,MAAK,SAAA8D,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMnE,MAAK,SAAA0C,GACjCA,EAAa0B,aAAapE,MAAK,WAC7BiC,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMnE,MAAK,WACjCiD,QAAQC,IACN,gHAMJb,EAAgBC,OCxCxBiC,GAEAC,cAAiBxE,MAAK,WACjByE,YAAqBxC,a","file":"static/js/main.c126773b.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t22,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 17;\nmodule.exports = webpackAsyncContext;","import React, { useState } from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction CustomerList() {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [inputList, setInputList] = useState([])\r\n\r\n    const inputValueHandler = (e) => {\r\n        e.preventDefault();\r\n        const inputVal = e.target.value\r\n        if(inputVal !== \"\"){\r\n          setInputValue(e.target.value)\r\n        }\r\n        \r\n    }\r\n    const add = () => {\r\n      if(inputValue !== \"\"){\r\n        setInputList((prevState) => [...prevState, inputValue])\r\n        setInputValue(\"\")\r\n      }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-75 layout-column justify-content-center align-items-center\">\r\n            <section className=\"layout-row align-items-center justify-content-center\">\r\n                <input type=\"text\" className=\"large\" placeholder=\"Name\" data-testid=\"app-input\" value={inputValue} onChange={inputValueHandler} />\r\n                <button onClick={add} type=\"submit\" className=\"ml-30\" data-testid=\"submit-button\">Add Customer</button>\r\n            </section>\r\n            <ul className=\"styled mt-50\" data-testid=\"customer-list\">\r\n            {\r\n              inputList ?   \r\n                    inputList.map((item, index) => {\r\n                        return <li className=\"slide-up-fade-in\" data-testid={`list-item${index}`} key={index} >{item}</li>\r\n                    })\r\n              :\r\n             null\r\n            }\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerList","import React  from 'react';\r\nimport './App.css';\r\nimport CustomerList from './components/customer-list/index.js';\r\nimport 'h8k-components';\r\n\r\nconst title = \"Customer List\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h8k-navbar header={title} />\r\n      <CustomerList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {applyPolyfills, defineCustomElements} from 'h8k-components/loader';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\napplyPolyfills().then(() => {\r\n     defineCustomElements(window);\r\n});\r\n"],"sourceRoot":""}